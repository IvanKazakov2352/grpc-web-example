// @generated by protobuf-ts 2.11.0
// @generated from protobuf file "transport.proto" (package "Rpc", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Transport } from "./transport";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { RpcResponse } from "./transport";
import type { RpcRequest } from "./transport";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service Rpc.Transport
 */
export interface ITransportClient {
    /**
     * @generated from protobuf rpc: Unary
     */
    unary(input: RpcRequest, options?: RpcOptions): UnaryCall<RpcRequest, RpcResponse>;
    /**
     * @generated from protobuf rpc: ServerStream
     */
    serverStream(input: RpcRequest, options?: RpcOptions): ServerStreamingCall<RpcRequest, RpcResponse>;
}
/**
 * @generated from protobuf service Rpc.Transport
 */
export class TransportClient implements ITransportClient, ServiceInfo {
    typeName = Transport.typeName;
    methods = Transport.methods;
    options = Transport.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Unary
     */
    unary(input: RpcRequest, options?: RpcOptions): UnaryCall<RpcRequest, RpcResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<RpcRequest, RpcResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ServerStream
     */
    serverStream(input: RpcRequest, options?: RpcOptions): ServerStreamingCall<RpcRequest, RpcResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<RpcRequest, RpcResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
